// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Module {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roles       Role[]
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  name         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userRoles    UserRole[]
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     
  description String?
  moduleId    Int
  module      Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
  permissions RolePermission[]

  @@unique([name, moduleId])
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@unique([name])
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// CRM Module Tables
model CRMOrganization {
  id            Int       @id @default(autoincrement())
  name          String
  industry      String?
  address       String?
  people        CRMPerson[]
  deals         CRMDeal[]
  projects      CRMProject[]
  leads         CRMLead[]
  activities    CRMActivity[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMPerson {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?
  phone         String?
  organizationId Int?
  organization  CRMOrganization? @relation(fields: [organizationId], references: [id])
  deals         CRMDeal[]
  projects      CRMProject[]
  leads         CRMLead[]
  activities    CRMActivity[]
  emails        CRMEmail[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMLead {
  id            Int       @id @default(autoincrement())
  title         String
  value         Float?
  statusId      Int?
  status        CRMStatus? @relation("LeadStatus", fields: [statusId], references: [id])
  organizationId Int?
  organization  CRMOrganization? @relation(fields: [organizationId], references: [id])
  personId      Int?
  person        CRMPerson?   @relation(fields: [personId], references: [id])
  activities    CRMActivity[]
  emails        CRMEmail[]
  convertedDeal CRMDeal?     // If lead is converted to deal
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMDeal {
  id            Int       @id @default(autoincrement())
  title         String
  value         Float
  currency      String    @default("USD")
  statusId      Int?
  status        CRMStatus? @relation("DealStatus", fields: [statusId], references: [id])
  pipelineId    Int
  pipeline      CRMPipeline @relation(fields: [pipelineId], references: [id])
  stageId       Int
  stage         CRMPipelineStage @relation(fields: [stageId], references: [id])
  probability   Float?    // Can be overridden from stage's default probability
  expectedCloseDate DateTime?
  organizationId Int?
  organization  CRMOrganization? @relation(fields: [organizationId], references: [id])
  personId      Int?
  person        CRMPerson?   @relation(fields: [personId], references: [id])
  projectId     Int?
  project       CRMProject?  @relation(fields: [projectId], references: [id])
  leadId        Int?     @unique // The lead this deal was converted from
  lead          CRMLead?    @relation(fields: [leadId], references: [id])
  activities    CRMActivity[]
  products      CRMDealProduct[]
  emails        CRMEmail[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMProject {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  statusId      Int?
  status        CRMStatus? @relation("ProjectStatus", fields: [statusId], references: [id])
  progress      Float     @default(0) // 0-100
  organizationId Int?
  organization  CRMOrganization? @relation(fields: [organizationId], references: [id])
  personId      Int?
  person        CRMPerson?   @relation(fields: [personId], references: [id])
  deals         CRMDeal[]
  activities    CRMActivity[]
  tasks         CRMProjectTask[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMProjectTask {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  status        String    // e.g., "todo", "in-progress", "done"
  projectId     Int
  project       CRMProject   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTaskId  Int?
  parentTask    CRMProjectTask? @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks      CRMProjectTask[] @relation("SubTasks")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMActivity {
  id            Int       @id @default(autoincrement())
  type          String    // e.g., "call", "meeting", "email", "task"
  title         String
  description   String?
  dueDate       DateTime?
  statusId      Int?
  status        CRMStatus? @relation("ActivityStatus", fields: [statusId], references: [id])
  organizationId Int?
  organization  CRMOrganization? @relation(fields: [organizationId], references: [id])
  personId      Int?
  person        CRMPerson?   @relation(fields: [personId], references: [id])
  dealId        Int?
  deal          CRMDeal?     @relation(fields: [dealId], references: [id])
  leadId        Int?
  lead          CRMLead?     @relation(fields: [leadId], references: [id])
  projectId     Int?
  project       CRMProject?  @relation(fields: [projectId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMProduct {
  id            Int       @id @default(autoincrement())
  name          String
  code          String?   @unique
  description   String?
  price         Float
  currency      String    @default("USD")
  tax           Float?
  active        Boolean   @default(true)
  deals         CRMDealProduct[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMDealProduct {
  id            Int       @id @default(autoincrement())
  dealId        Int
  deal          CRMDeal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  productId     Int
  product       CRMProduct   @relation(fields: [productId], references: [id])
  quantity      Int       @default(1)
  price         Float     // Price at the time of deal
  tax           Float?    // Tax at the time of deal
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([dealId, productId])
}

model CRMEmail {
  id            Int       @id @default(autoincrement())
  subject       String
  body          String
  fromEmail     String
  toEmail       String
  personId      Int?
  person        CRMPerson?   @relation(fields: [personId], references: [id])
  dealId        Int?
  deal          CRMDeal?     @relation(fields: [dealId], references: [id])
  leadId        Int?
  lead          CRMLead?     @relation(fields: [leadId], references: [id])
  attachments   CRMEmailAttachment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CRMEmailAttachment {
  id            Int       @id @default(autoincrement())
  emailId       Int
  email         CRMEmail     @relation(fields: [emailId], references: [id], onDelete: Cascade)
  fileName      String
  fileUrl       String
  fileSize      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Pipeline related models
model CRMPipeline {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  isDefault     Boolean   @default(false)
  isActive      Boolean   @default(true)
  displayOrder  Int       @default(0)
  stages        CRMPipelineStage[]
  deals         CRMDeal[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name])
}

model CRMPipelineStage {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  probability   Float     @default(0) // Probability of winning a deal at this stage (0-100)
  displayOrder  Int
  color         String?   // For UI customization
  pipelineId   Int
  pipeline      CRMPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  deals         CRMDeal[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name, pipelineId])
}

// Status models for different entities
model CRMStatus {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  type          CRMStatusType  // Enum to identify which entity this status belongs to
  color         String?   // For UI customization
  isDefault     Boolean   @default(false)
  isActive      Boolean   @default(true)
  displayOrder  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  leads         CRMLead[]     @relation("LeadStatus")
  deals         CRMDeal[]     @relation("DealStatus")
  projects      CRMProject[]  @relation("ProjectStatus")
  activities    CRMActivity[] @relation("ActivityStatus")

  @@unique([name, type])
}

enum CRMStatusType {
  LEAD
  DEAL
  PROJECT
  ACTIVITY
}