// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  email         String        @unique
  password      String
  createdAt     DateTime      @default(now())
  status        String        @default("active")

  groups        UserGroup[]   // many-to-many via UserGroup
  userPolicies  UserPolicy[]
}

model Group {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  createdAt     DateTime      @default(now())

  users         UserGroup[]
  groupPolicies GroupPolicy[]
}

model Policy {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  description    String?
  policyDocument Json
  createdAt      DateTime       @default(now())

  userPolicies   UserPolicy[]
  groupPolicies  GroupPolicy[]
}

model UserGroup {
  userId   Int
  groupId  Int

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model UserPolicy {
  userId   Int
  policyId Int

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  policy   Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@id([userId, policyId])
}

model GroupPolicy {
  groupId  Int
  policyId Int

  group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  policy   Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@id([groupId, policyId])
}
